@page "/editgame"
@page "/editgame/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient

<PageTitle>@title</PageTitle>

@if(genres is null || game is null)
{
 <p><em>Loading...</em></p>
}
else
{
  <div class="d-flex justify-content-center align-items-center ">
    <div class="bg-dark row text-white rounded p-3" style="width: 600px;">
      <h3 class="mt-3 mb-3 ">@title</h3>
      <EditForm Model="@game" FormName= "editGame" OnValidSubmit="HandleSubmit">
          <DataAnnotationsValidator/>

          <div class="mb-3 ">
            <label for="name" class="form-label">Name:</label>
            <InputText  id="name" @bind-Value ="game.Name" class="form-control"/>
            <ValidationMessage For="() => game.Name"/>
          </div>

          <div class="mb-3">
            <label for="genre" class="form-label">Genre:</label>
            <InputSelect  id="genre" @bind-Value ="game.GenreId" class="form-select">
              <option value="">Select a genre</option>
              @foreach(var genre in genres)
              {
                <option value="@genre.Id">@genre.Name</option>
              }
            </InputSelect>
            <ValidationMessage For="() => game.GenreId"/>
          </div>

          <div class="mb-3">
            <label for="price" class="form-label">Price:</label>
            <InputNumber id="price" @bind-Value ="game.Price" class="form-select"/>
            <ValidationMessage For="() => game.Price"/>
          </div>

          <div class="mb-3">
            <label for="releaseDate" class="form-label">Release Date:</label>
            <InputDate  id="releaseDate" @bind-Value ="game.ReleaseDate" class="form-control"/>
          </div>

          <div class="mb-3 d-flex justify-content-center">
            <button type="submit" class="btn btn-primary me-3">Save</button>
            <a role="button" class="btn btn-secondary" href="/">Cancel</a>
          </div>

        </EditForm>

    </div>
  </div>
}

@code 
{
    [Parameter]public int? Id{get; set;}
    [SupplyParameterFromForm]private GameDetails? game {get;set;}
    private Genre[]? genres;
    private string title = string.Empty;
    protected override void OnParametersSet()
    {
      if(game is not null)
      {
        return;
      }

      if(Id is not null)
      {
        game = GamesClient.GetGame(Id.Value);
        title = $"Editing {game.Name}";
      }
      else
      {
        game = new()
        {
          Name = string.Empty,
          ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
        };

        title = "Add New Game";
      }
    }

    protected override void OnInitialized()
    {
      genres = GenresClient.GetGenres();
    }

    private void HandleSubmit()
    {
      ArgumentNullException.ThrowIfNull(game);

      if(Id is null)
      {
        GamesClient.AddNewgame(game);
        
      }
      else
      {
        game.Id = Id.Value;
        GamesClient.UpdateGame(game);
      }

      NavigationManager.NavigateTo("/");
    }
}


<style>
    html, body {
       background-image: url('Images/Games.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        height: 100%;
    }
</style>